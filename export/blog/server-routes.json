{"author":{"name":"Matt Crouch","image":"/images/matt-crouch.jpg"},"image":"/images/server-routes.png","title":"Server routes","slug":"server-routes","html":"<p>Sapper can manage the server side as well as the client side. While pre-rendering is all handled through middleware elsewhere, Sapper can consume other <code>.js</code> files to use them as endpoints for data.</p>\n<p>For some projects, there may be a need to consume data through a means other than HTML. For example, a blog might have a JSON endpoint or an RSS feed to generate. These server routes are a great place to create those.</p>\n<pre><code class=\"language-js\">export function get(req, res) {\n  const { slug } = req.params;\n\n  if (lookup.has(slug)) {\n    res.writeHead(200, {\n      &quot;Content-Type&quot;: &quot;application/json&quot;\n    });\n\n    res.end(lookup.get(slug));\n  } else {\n    res.writeHead(404, {\n      &quot;Content-Type&quot;: &quot;application/json&quot;\n    });\n\n    res.end(\n      JSON.stringify({\n        message: `Not found`\n      })\n    );\n  }\n}</code></pre>\n<p>Each <code>.js</code> file can export a function that corresponds to a HTTP method. The corresponding function is fired when a request comes in through that method.</p>\n<p>In the above example, we are checking if we have a blog post on file with that defined <code>slug</code> value. If we do, return it with a <code>200</code> response. If not, send a <code>404</code> instead.</p>\n<p>The data that powers these screens can come from anywhere - either consuming some other API on another service or by importing another local dataset. It&#39;s entirely up to us as developers to work out what&#39;s best for the project.</p>\n<p>Of course, there is no hard requirement to use server routes <em>at all</em>. If they are not useful, they can just be left off.</p>\n"}